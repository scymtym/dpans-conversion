* Introduction

  This repository contains code for processing the sources of the
  draft Common Lisp specification and the X3J13 cleanup issues into
  other formats such as HTML.

  This project is designed to work with slightly modified versions of
  the above artifacts which can be found in the ~online-lisp-meeting~
  branch of https://github.com/s-expressionists/dpans.

* Usage

  This system is still in an experimental phase, so problems are,
  unfortunately, to be expected. In particular, it is possible that I
  forgot to push some changes either in this repository or in one of
  the dependencies.

** Dependencies

   A few dependencies (or particular versions of required systems) of
   this system are not yet available in Quicklisp.

   + Generalized Packrat Parser ::
        ~future~ branch of https://github.com/scymtym/parser.packrat

   + Parse Tree Constructing and Transformation ::
        ~master~ branch of
        https://github.com/scymtym/architecture.builder-protocol
        (Quicklisp version is probably too old)

   + Environment Handling ::
        ~future~ branch of
        https://github.com/scymtym/computation.environment

   + Source Location Reporting ::
        ~future~ branch of
        https://github.com/scymtym/text.source-location

   + Eclector Syntax Highlighting ::
        ~online-lisp-meeting~ branch of
        https://github.com/s-expressionists/Eclector

   + McCLIM ::
        ~master~ branch of https://github.com/mcclim/mcclim

        This is only necessary due to an incompatibility between SBCL
        and the McCLIM version that is distributed in Quicklisp.

** Getting Started

   This system operates on slightly modified dpANS and X3J13 sources
   which are available in the ~online-lisp-meeting~ branch of
   https://github.com/s-expressionists/dpans.

   After making the dependencies available and loading the system with

   #+BEGIN_SRC lisp
     (ql:quickload :dpans-conversion) ; or (ql:quickload :dpans-conversion.clim)
   #+END_SRC

   a few high-level operations are available

   + Conversion to HTML ::

        #+BEGIN_SRC lisp
          (handler-bind ((error (lambda (condition)
                                  (princ condition)
                                  (terpri)
                                  (continue))))
            (dpans-conversion::to-html #P"/path-to/dpans-repository/" #P"/output/directory/"))
        #+END_SRC

        where =/path-to/dpans-repository/= refers to the
        https://github.com/s-expressionists/dpans repository mentioned
        above.

   + Prepare and View in CLIM-based Browser ::

        To view the specification in the CLIM-based browser, the
        specification must first be parsed and transformed:

        #+BEGIN_SRC lisp
          (handler-bind ((error (lambda (condition)
                                  (princ condition)
                                  (terpri)
                                  (continue))))
            (dpans-conversion::to-clim #P"/path-to/dpans-repository/"))
        #+END_SRC

        where =/path-to/dpans-repository/= refers to the
        https://github.com/s-expressionists/dpans repository mentioned
        above.

        Then the browser can be started:

        #+BEGIN_SRC lisp
          (dpans-conversion.clim:browse)
        #+END_SRC

   + Conversion and Serialization to S-Expressions ::

        TODO document

   + Making a commandline utility ::

        The conversion functionality of this system can also be turned
        into a commandline utility:

        #+BEGIN_SRC sh
          $ sbcl --noinform --dynamic-space-size 4Gb                          \
              --load PATH-TO-QUICKLISP/setup.lisp                             \
              --eval '(ql:quickload :dpans-conversion/commandline-interface)' \
              --eval '(asdf:make "dpans-conversion/commandline-interface")'
          $ PATH-TO-DPANS-CONVERSION-REPOSITORY/dpans-converter PATH-TO-DPANS-SOURCES /tmp/output/ --format html
        #+END_SRC

        When invoked without arguments, the program prints supported
        commandline options.

* Other Efforts

  + https://github.com/lokedhs/parse-lisp-spec

  + https://github.com/robert-strandh/dpANS-parser

  + https://gitlab.com/vancan1ty/clstandard_build/ ::

       Seems to be focused on producing an enhanced PDF version.

  + https://github.com/yitzchak/dpANS3-parser ::

       Most similar so far(?)

  + https://github.com/tvraman/aster-math/ ::

       General TeX parsing

  + https://mr.gy/ansi-common-lisp/ ::

       Is a conversion to HTML and also has a (dead) link to a
       converter.

       Converter in wayback machine:
       https://web.archive.org/web/20150804121327/http://users-phys.au.dk/harder/dpans.html

  + Texinfo conversion for GCL ::

       https://ftp.nluug.nl/gnu/gcl/old/ seems to have it:
       https://ftp.nluug.nl/gnu/gcl/old/gcl-info+texi.tgz

  + TeX parser implemented in Java ::

       https://github.com/nlct/texparser

  + LaTeX parser implemented in Haskell ::

       https://github.com/synsem/texhs

* Material

  + TeX Resources :: https://www.tug.org/interest.html#plain

  + TeX Primitive Control Sequences ::
       http://www.tug.org/utilities/plain/cseq.html

  + A Gentle Introduction to TeXt ::
       https://ctan.mirror.norbert-ruehl.de/info/gentle/gentle.pdf

  + TeX for the Impatient ::
       ftp://ftp.gwdg.de/pub/ctan/info/impatient/book.pdf

  + Einf√ºhrung in TeX (German) ::
       https://www.ruhr-uni-bochum.de/TeX/einfuehrung-in-tex.pdf

  + Unicode and Special Characters ::
       https://agiletribe.wordpress.com/2015/04/07/adding-unicode-characters-to-latex-documents/

  + Porter Stemmer Algorithm (Possibly needed for glossary references) ::
       http://snowball.tartarus.org/algorithms/porter/stemmer.html

  + Kent Pitman's CL References ::
       http://www.nhplace.com/kent/CL/index.html

  + TeX to Unicode (for HTML and CLIM renderes) ::
       https://golopot.github.io/tex-to-unicode/
